/*******************************************************************
 * Class: CS480 Translators Final Project
 * Assignment: Topic 1 - Translating Larger Subsets of Python
 * Authors: Thomas Albertine, Hailey Palmiter, and Rylee Glassman (AKA Group 32)
********************************************************************/

1. List the features that your team have successfully implemented.

	Our team wrote the entire project from scratch, except for the code to convert a double into a string formatted like Python does.
	Our team has successfully implemented the following statements:
	
	print (with varying numbers of arguments and optional newlines)
	while
	for (to be used in conjunction with dictionaries and lists, although the order in which dictionary keys are iterated is implementation specific, so we can't promise that it will match the server's)
	if (also supporting elif and else)
	pass
	break
	continue
	assignment (and augmented assignment for operations from below which are supported in Python)

	We've also implemented the following types, using dynamic typing:

	integer
	bool
	float (actually implemented as a double)
	list (supports varying types including other collections, which may recursively contain the first list or each other)
	dict (supports floats, ints, bools, and None as key types, and supports floats, ints, bools, None, Dict, and List as value types, the last of which may be recursive as with the lists. However, lists and dicts are not hashable in Python because they are mutable, therefore they cannot be used as keys. The same logic applies to our implementation.)

	This is a list of the operations we support. Note that some, while syntactically correct, will result in errors (dividing by zero, indexing a list by something other than an int or a bool, trying to use a list or a dict as a key in a dict, etc.)
	Binary Addition
	Multiplication
	Binary Subtraction
	Division
	Floor Division
	Modulo (both integer and floating modulo)
	is (may behave differently from Python on the server with small integers, as it is left to the implementation to decide if small integers should be kept as constants, or recreated as needed. Python on the server chooses the former, but we chose the latter)
	is not (implemented by applying not to the is operator, and therefore has the same quirks that are implementation specific)
	List Subscripts (for assignment or for retrieval)
	Dict Subscripts (for assignment or for retrieval)
	or
	and
	not
	Greater Than*
	Less Than*
	Greater Than or Equal To*
	Less Than or Equal To*
	Equals*
	Not Equals*
	Unary Addition
	Unary Subtraction
	Power (the ** operator. We don't implement functions, so unpacking isn't really an operation we care about)
	List Construction (AKA [a1, a2, a3, a4], where a1-aN are expressions)
	Dict Construction (AKA [k1:v1, k2:v2, k3:v3], where k1-kN are keys and v1-vN are values)
	in (for lists, or keys in a dictionary)
	not in (implemented by applying not to in)

	*When comparing items of different types, Python does not specify what the order should be, leaving it up to the implementation (so long as it's consistent), unless the object in question explicitely states the rule, or it is a numeric type. Therefore, comparing numeric types will behave predictably, but comparing dicts, lists, or None with numeric types or with each other may not match the implementation on the server.

	Other notable Python features that we implement:

	Reference Counting (to go along with the dynamic typing)
	Recursive Lists (Printing and checks for equality attempt to avoid infinite recursion in this case)



2. State each author’s contributions.

	Thomas wrote a grammar for the features that we support.
	All three of us did pair programming while we wrote the Python code.
	Hailey and Thomas wrote the first C code and test file.
	We pair programmed during the last of the C code, and some of the debugging.
	Thomas did the last of the debugging on his own.

	Thomas worked roughly 42 hours.


	
3. If your team have discussed with another team, list that team’s members.

	Our team did not discuss with any other teams. 
	
4. Any suggestions?

	A more clear definition of what features we need for the final. Sometimes, Python output can vary based on implementation, so we could have correct output but it might not match the output the TAs are expecting. I know Dr. Huang mentioned that the tests would not be reliant on implementation details, but since we this is the final and we can't come back to discuss these things, it would be nice to see which ones the TAs and Dr. Huang know about so we're all on the same page.
	Comments in the sample code would be helpful as well.
	Explicit instructions regarding which compiler to expect. In the parts that we were able to pull form the sample code, sometimes compiling with g++ matches Python output, while clang++ provided output matched the meaning of the python output, but did not match character for character. Initializing some of the variables to zero resolved this problem however.